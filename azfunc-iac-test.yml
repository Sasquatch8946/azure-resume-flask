# Python Function App to Linux on Azure
# Build a Python function app and deploy it to Azure as a Linux function app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
  branches:
    include:
      - modular
  paths:
    include:
      - backend/api

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'test-iac'

  # Function app name
  functionAppName: 'getandupdatecounter'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Working Directory
  workingDirectory: '$(System.DefaultWorkingDirectory)/backend/api'

stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    # - bash: |
    #     if [ -f extensions.csproj ]
    #     then
    #         dotnet build extensions.csproj --runtime ubuntu.16.04-x64 --output ./bin
    #     fi
    #   workingDirectory: $(workingDirectory)
    #   displayName: 'Build extensions'

    # - task: UsePythonVersion@0
    #   displayName: 'Use Python 3.10'
    #   inputs:
    #     versionSpec: 3.10 # Functions V2 supports Python 3.6 as of today

    # - bash: |
    #     pip install --target="./.python_packages/lib/site-packages" -r ./requirements.txt
    #   workingDirectory: $(workingDirectory)
    #   displayName: 'Install application dependencies'

    # - task: ArchiveFiles@2
    #   displayName: 'Archive files'
    #   inputs:
    #     rootFolderOrFile: '$(workingDirectory)'
    #     includeRootFolder: false
    #     archiveType: zip
    #     archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
    #     replaceExistingArchive: true

    # - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
    #   artifact: drop

    # - bash: |
    #     pwd
    #     pip install pytest pytest-azurepipelines azure-functions
    #     python -m pytest tests
    #   workingDirectory: $(workingDirectory)
    
    - task: PowerShell@2
      displayName: 'Generate guid for deployment'
    
    - powershell: |
          Write-Host "guid var: ${env:GUID}"
      